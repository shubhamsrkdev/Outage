import xlrd
import tkinter
import xlwt
import time
from datetime import datetime
from functools import partial
from xlwt import Workbook
from xlrd import open_workbook
from xlutils.copy import copy
import re
#Excel is read here
loc=("AR.xlsx")
l=[]
fl=[]
wbi = xlrd.open_workbook(loc)

sheeti = wbi.sheet_by_index(0)
rowi = sheeti.row(0)  # 1st row
sheeti.cell_value(0, 0)
for j in range(0,sheeti.nrows) :
    l.append("Re: "+sheeti.cell_value(j, 2))

wbo = Workbook()
Sheet1 = wbo.add_sheet('Sheet1', cell_overwrite_ok=True)
wb = xlrd.open_workbook(loc)
sheet = wb.sheet_by_index(0)
row = sheet.row(0)  # 1st row
sheet.cell_value(0, 0)
p=0
for i in range(0,sheet.nrows):

    Sheet1.write(p, 0, sheet.cell_value(i, 2))
    if "ME-" in sheet.cell_value(i, 2):
        ind=sheet.cell_value(i, 2).index("ME-")+3
        Sheet1.write(p, 1, "ME-"+sheet.cell_value(i, 2)[ind])
    elif "AR-4" in sheet.cell_value(i, 2):
        Sheet1.write(p,1,"AR-4")

    if "monitor mode" in sheet.cell_value(i, 4).lower() and "close" not in sheet.cell_value(i, 4).lower():
        Sheet1.write(p, 2, "Monitor")
    elif "close" in sheet.cell_value(i, 4).lower():
        Sheet1.write(p, 2, "Closed")
    else:
        Sheet1.write(p, 2, "Open")
    str_list = list(filter(None, sheet.cell_value(i, 4).split('\r\n')))
    if 'Event description & impact' in str_list:
        Sheet1.write(p, 3, str_list[str_list.index('Event description & impact')+1])
    if 'Start date/time (GMT)' in str_list:
        Sheet1.write(p, 4, str_list[str_list.index('Start date/time (GMT)') + 1])
    if 'End date/time (GMT)' in str_list:
        Sheet1.write(p, 5, str_list[str_list.index('End date/time (GMT)') + 1])
    if 'Customers impacted' in str_list:
        Sheet1.write(p, 6, str_list[str_list.index('Customers impacted') + 1])
    if 'Ticket reference' in str_list:
        Sheet1.write(p, 7, str_list[str_list.index('Ticket reference') + 1])


    p=p+1

wbo.save('fin.xls')

#Reply mails are checked here
wblocat = xlrd.open_workbook('fin.xls')

sheetlocat = wblocat.sheet_by_index(0)
rowlocat = sheetlocat.row(0)  # 1st row
sheetlocat.cell_value(0, 0)
rb = open_workbook('fin.xls',formatting_info=True)
r_sheet = rb.sheet_by_index(0) # read only copy to introspect the file
wblo = copy(rb) # a writable copy (I can't read values out of this, only write to it)
w_sheet = wblo.get_sheet(0) # the sheet to write to within the writable copy

for k in range (0,r_sheet.nrows):
    if (r_sheet.cell_value(k,0) in l):
        w_sheet.write(l.index(sheetlocat.cell_value(k,0)),2,sheetlocat.cell_value(k,2))
        for o in range(0,9):
            w_sheet.write(k,o,"")

wblo.save('fin2.xls')
#GUI is added below
from tkinter import *
import tkinter.ttk
m= tkinter.Tk()
from tkinter import messagebox
m.state('zoomed')

m.title ('Major Event Manager V-1.0')

tree = tkinter.ttk.Treeview(m, show = 'headings')
#tkinter.ttk.Style().configure('Treeview',rowheight=30)
tree["columns"] = ("1", "2","3","4","5","6","7","8")
tree.column("1", width=300)
tree.column("2", width=10)
tree.column("3", width=10)
tree.column("4", width=300)
tree.column("5", width=40)
tree.column("6", width=40)
tree.column("7", width=300)
tree.column("8", width=90)

tree.heading("1", text="Subject")
tree.heading("2", text="Type")
tree.heading("3", text="Status")
tree.heading("4", text="Update")
tree.heading("5", text="Start Date")
tree.heading("6", text="End Date")
tree.heading("7", text="Customers Affected")
tree.heading("8", text="Ticket number")
#Sender	Type	Status	Update	Start Date	End Date	Customers affected	Ticket number
display_text = tkinter.StringVar()
display_text.set('')

monthtext= tkinter.StringVar()
monthtext.set("Please select month")
w = Label(m, textvariable=display_text)
w.pack()
v = Label(m, textvariable=monthtext)
v.pack()
display_text.set(str(datetime.now().year))
year=str(datetime.now().year)
tree.tag_configure('ttk', background='yellow')
#button=tkinter.Button(m,activebackground="blue",activeforeground="white")
#button.pack()
location=("./fin2.xls")
work = xlrd.open_workbook(location)
sheetf = work.sheet_by_index(0)
rowf = sheetf.row(0)  # 1st row
sheetf.cell_value(0, 0)
def complete():
    tree.delete(*tree.get_children())
    sheetf = work.sheet_by_index(0)
    rowf = sheetf.row(0)  # 1st row
    sheetf.cell_value(0, 0)
    for j in range(0, sheetf.nrows):
        h = []
        for y in range(0, 8):
            h.append(sheetf.cell_value(j, y))
        if h[0]!="":
            if (h[2]=="Closed"):
                tree.insert("", j, values=h, tags="closed")
            elif (h[2]=="Monitor"):
                tree.insert("", j, values=h, tags="monitor")
            else:
                tree.insert("", j, values=h, tags="open")

    tree.tag_configure('closed', background='green')
    tree.tag_configure('monitor', background='yellow')
    tree.tag_configure('open', background='red')
    tree.pack()

complete()

tree.pack(fill = 'both', expand = 'Yes')


def donothing(n):
  global display_text
  global year
  display_text.set(n)
  monthtext.set("Please set month")
  year = n

def month(n):

    global monthtext
    months=["January","February","March","April","May","June","July","August","September","October","November","December"]
    month_set=int(n)-1
    monthtext.set(months[month_set])
    tree.delete(*tree.get_children())

    sheetsorm=work.sheet_by_index(0)
    rowsor = sheetsorm.row(0)
    for qm in range(0, sheetsorm.nrows):
        hlm = []

        if sheetsorm.cell_value(qm,0) != "":




            if sheetsorm.cell_value(qm, 4)[7] == n and sheetsorm.cell_value(qm, 4)[1:5] == year:



                for zm in range(0, 8):
                    hlm.append(sheetsorm.cell_value(qm, zm))
                if hlm[0] != "":
                    if (hlm[2] == "Closed"):
                        tree.insert("", qm, values=hlm, tags="closed")
                    elif (hlm[2] == "Monitor"):
                        tree.insert("", qm, values=hlm, tags="monitor")
                    else:
                        tree.insert("", qm, values=hlm, tags="open")

    tree.tag_configure('closed', background='green')
    tree.tag_configure('monitor', background='yellow')
    tree.tag_configure('open', background='red')
    tree.pack()

def status(n):
    tree.delete(*tree.get_children())

    sheetsor = work.sheet_by_index(0)
    rowsor = sheetsor.row(0)
    for q in range(0, sheetsor.nrows):
        hl = []

        if sheetsor.cell_value(q, 0) != "":
            if sheetsor.cell_value(q, 2) == n :

                for z in range(0, 8):
                    hl.append(sheetsor.cell_value(q, z))
                tree.insert("", q, values=hl,tags="indi")

    tree.tag_configure('indi', background='light blue')
    tree.pack()
def popup_showinfo():
    messagebox.showinfo("About", "Hello! Please report bugs at f20160184@hyderabad.bits-pilani.ac.in")
menu = Menu(m)
m.config(menu=menu)
yearmenu = Menu(menu, tearoff=0)
filemenu = Menu(menu, tearoff=0)
statusmenu=Menu(menu, tearoff=0)
menu.add_cascade(label='Year', menu=yearmenu)
yearmenu.add_command(label='2018', command=partial(donothing,'2018'))
yearmenu.add_command(label='2019', command=partial(donothing,'2019'))
yearmenu.add_command(label='2020', command=partial(donothing,'2020'))
yearmenu.add_command(label='2021', command=partial(donothing,'2021'))
yearmenu.add_command(label='2022', command=partial(donothing,'2022'))
yearmenu.add_command(label='2023', command=partial(donothing,'2023'))
menu.add_cascade(label='Month', menu=filemenu)
filemenu.add_command(label='Display All', command=complete)
filemenu.add_command(label='January', command=partial(month,'1'))
filemenu.add_command(label='February', command=partial(month,'2'))
filemenu.add_command(label='March', command=partial(month,'3'))
filemenu.add_command(label='April', command=partial(month,'4'))
filemenu.add_command(label='May', command=partial(month,'5'))
filemenu.add_command(label='June', command=partial(month,'6'))
filemenu.add_command(label='July', command=partial(month,'7'))
filemenu.add_command(label='August', command=partial(month,'8'))
filemenu.add_command(label='September', command=partial(month,'9'))
filemenu.add_command(label='October', command=partial(month,'10'))
filemenu.add_command(label='November', command=partial(month,'11'))
filemenu.add_command(label='December', command=partial(month,'12'))
menu.add_cascade(label='Status', menu=statusmenu)
statusmenu.add_command(label='Open', command=partial(status,'Open'))
statusmenu.add_command(label='Monitor', command=partial(status,'Monitor'))
statusmenu.add_command(label='Close', command=partial(status,'Closed'))

filemenu.add_separator()
filemenu.add_command(label='Exit', command=m.quit)
helpmenu = Menu(menu, tearoff=0)
menu.add_cascade(label='Help', menu=helpmenu)
helpmenu.add_command(label='About',command=popup_showinfo)

m.config(menu=menu)
m.mainloop()
